#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import unittest
from functools import reduce

__author__ = "Victor Klimov"
__copyright__ = "Creative Commons License;)"


# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]

# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
matrix_rotate = [[1, 3, 0],
                 [0, 4, 4],
                 [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку


tmp = [[x[y] for x in matrix] for y in range(3)]

def transposition(matrix): return [list(x) for x in zip(*matrix)]


# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""


def foo():
    global number
    number = number.replace("\n", "")
    lst = []
    for i in range(1000-5+1):
        multiply = reduce(lambda x, y: x * y, map(int, number[i:i+5]))
        lst.append([multiply, i])
    new = sorted(lst, key=lambda x: x[0])
    print("Наибольшее произведение - {}, индекс смещения первого числа последовательноси - {}"
          .format(new[-1][0], new[-1][1]))


foo()


# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга.
# Вам дана расстановка 8 ферзей на доске. Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел, каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.


def is_any_queen_in_danger(*args):
    d = {}
    for queen in args:
        steps = []
        for add_x, add_y in [(1, 1), (-1, -1), (1, -1), (-1, 1), (1, 0), (0, 1), (-1, 0), (0, -1)]:
            steps.extend(fill(queen[0], queen[1], add_x, add_y))
        d[queen] = steps
    for queen in args:
        for some in d:
            if queen != some:
                if some in d[queen]:
                    return "YES"
    return "NO"


def fill(x, y, add_x, add_y):
    steps = []
    x += add_x
    y += add_y
    while 0 <= x <= 7 and 0 <= y <= 7:
        steps.append((x, y))
        x += add_x
        y += add_y
    return steps


# ----------------------------------TEST-----------------------------------------


class Test(unittest.TestCase):
    def test_transposition(self):
        self.assertEqual(transposition(matrix), matrix_rotate)

    def test_is_any_queen_in_danger(self):
        self.assertEqual(is_any_queen_in_danger((3, 0), (6, 1), (2, 2), (7, 3),
                                                (1, 4), (4, 5), (0, 6), (5, 7)), "NO")
        self.assertEqual(is_any_queen_in_danger((3, 0), (6, 0), (2, 2), (7, 3),
                                                (1, 4), (4, 5), (0, 6), (5, 7)), "YES")


if __name__ == "__main__":
    unittest.main()
